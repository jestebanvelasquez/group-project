// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  city     String
  country  String
  rol      UserRole
  shows    ShowArtist[]
  
  // AppArtsist AppArtsist[]
  // rol         String
}

model Show {
  id            String          @id @default(uuid())
  nickName      String          @unique
  eventName     String
  description   String
  imagesEvent   String[]
  duration      Int
  isActive      Boolean         @default(false)
  priceTime     Int
  priceDay      Int
  members       ShowArtist[]
  // User_Show     UserRole[]
  categories    Category_Show[]
  // members             Users[]
  // CalificationService CalificationService[] //calificaciones de los servicios!
}
model ShowArtist {
  showId    String
  show      Show @relation(fields: [showId], references: [id])
  userId    String
  user      Users @relation(fields: [userId], references: [id])
  @@id([showId, userId])
}

model Category {
  id        Int    @unique @default(autoincrement())
  name      String
  asignedBy String
  //muchos shows contiene muchas categorias
  shows     Category_Show[]
}

//relacion entre usuario-Artista y show:
model Category_Show {
  showId     String
  show       Show     @relation(fields: [showId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  assignedAt DateTime @default(now())
  @@id([showId, categoryId]) //codificando la clave de la relacion
}

model AppArtsist {
  createdAt DateTime @default(now())
  role      UserRole
  //relacion explicita:
  userId String
  showId String
  // user   Users  @relation(fields: [userId], references: [id])
  // show   Show   @relation(fields: [showId], references: [id])
  //PARA PODER SER ESTUDIANTE O PROFESOR DE UN CURSO:
  @@id([userId, showId, role])
}

// model CalificationService {
//   id        Int      @unique @default(autoincrement())
//   createdAt DateTime @default(now())
//   comments  String
//   score     Int // para presentarlo como un porcentaje result * 10^-1 = ...5%

//   //relacion al show
//   showId String
//   show   Show   @relation(fields: [showId], references: [id])
// }

enum UserRole {
  CONTRACTOR
  ARTIST
  ADMIN
}

/////////////////////////////////////////////////////////////////////////////////////////

// model User {
//   id            String @id @default(uuid())
//   email         String @unique
//   firstName     String
//   lastName      String
//   createAt      DateTime @default(now())
//   updateAt      DateTime
//   show          User_Artist[]// relacion muchos a muchos 1!
// }

// model Artist {
//   id            String @id @default(uuid())
//   email         String @unique
//   nickName      String @unique
//   name          String
//   lastName      String
//   city          String
//   country       String
//   eventName     String
//   description   String 
//   imagesEvent   String[]
//   duration      Int
//   isActive      Boolean @default(false) 
//   priceTime     Int
//   priceDay      Int
//   userReq       User_Artist[]
//   categorys     CategoryArtist[]// relacion muchos a muchos 1!
// }

// model User_Artist {
//   userId   String
//   user     User @relation(fields: [userId], references: [id])
//   artistId   String
//   artist     Artist @relation(fields: [artistId], references: [id])
//   @@id([userId, artistId])//codificando la clave de la relacion

// }

// model Category {
//   id            Int @default(autoincrement()) @unique
//   name          String 
//   artists      CategoryArtist[]

// }

// model CategoryArtist {

//   artistId     String 
//   artist       Artist @relation(fields: [artistId], references: [id])
//   categoryId    Int
//   category      Category @relation(fields: [categoryId], references: [id])
//   @@id([artistId, categoryId])//codificando la clave de la relacion

// }

// model Users {
//   // id          String @id @default(uuid()) 
//   userName    String @unique
//   password    String
//   city        String
//   country     String
//   rol         String
// }

// enum UserRole {
//     contractor
//     artist
//     admin
// }

// model Service {
//   id            String @id @default(uuid())
//   description   String 
//   price         Int
//   duration      Int
//   isActive      Boolean @default(false) 
//   createAt      DateTime @default(now())
//   updateAt      DateTime
//   users         UserService[]
//   artists       ArtistService[]
//   categorys     CategoryService[]
//   // services   Service[]// relacion muchos a muchos 1!
// }

// model UserService {
//   userId        String
//   user          User @relation(fields: [userId], references: [id])
//   serviceId     String
//   service       Service @relation(fields: [serviceId], references: [id])
//   @@id([userId, serviceId])//codificando la clave de la relacion
// }

// model ArtistService {
//   artistId      String
//   artist        Artist @relation(fields: [artistId], references: [id])
//   serviceId     String
//   service       Service @relation(fields: [serviceId], references: [id])
//   @@id([artistId, serviceId])//codificando la clave de la relacion
// }